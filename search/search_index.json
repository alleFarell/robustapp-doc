{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Robustapp Docs","text":"<p>Welcome to the official documentation for Robustapp, a platform designed to help you build scalable and robust applications effortlessly.</p> <p>For full MkDocs documentation visit mkdocs.org.</p>"},{"location":"#quick-commands","title":"Quick Commands","text":"<p>Use these commands to manage your documentation site:</p> <ul> <li><code>mkdocs new [dir-name]</code> \u2013 Create a new MkDocs project.</li> <li><code>mkdocs serve</code> \u2013 Start the live-reloading dev server.</li> <li><code>mkdocs build</code> \u2013 Build the static site.</li> <li><code>mkdocs -h</code> \u2013 Print help message and exit.</li> </ul>"},{"location":"about/","title":"About Robustapp","text":"<p>Robustapp is a modern framework built to simplify the development and deployment of scalable applications.</p>"},{"location":"about/#mission","title":"Mission","text":"<p>Our mission is to empower developers and teams to build reliable software with ease.</p>"},{"location":"about/#contact","title":"Contact","text":"<p>Have questions or feedback?</p> <ul> <li>Website: https://robustapp.example.com</li> <li>Email: support@robustapp.example.com</li> </ul>"},{"location":"getting-started/introduction/","title":"Introduction for New Technical Consultants","text":"<p>Welcome to the team! As a Technical Consultant at our company, your role is critical in delivering tailored ERP solutions to our clients. This document is your starting point \u2014 whether you're fresh out of college or bringing years of experience.</p>"},{"location":"getting-started/introduction/#what-youll-be-doing","title":"\ud83c\udfaf What You\u2019ll Be Doing","text":"<p>Every business is different \u2014 even those in the same industry. That's where you come in.</p> <p>As a Technical Consultant, your primary responsibility is to customize the ERP system based on the unique requirements provided by the Business Consultant. Here's a simplified flow:</p> <ol> <li>Client Requirements \u2192 gathered by Business Consultant</li> <li>Functional Analysis \u2192 documented and translated into technical specs</li> <li>Customization \u2192 implemented by you, the Technical Consultant</li> </ol>"},{"location":"getting-started/introduction/#what-you-need-to-know-starting-day-1","title":"\ud83e\udde0 What You Need to Know (Starting Day 1)","text":"Level Must Understand Fresh Graduate - What is ERP- Your job role and scope Junior - ERP concepts- Business process basics- Project lifecycle Senior - ERP architecture- Module interaction- Optimization and performance considerations"},{"location":"getting-started/introduction/#tech-stack","title":"\ud83d\ude80 Tech Stack","text":"<p>To succeed in this role, you should be confident working with:</p> <ul> <li>Java \u2013 core backend language</li> <li>SQL \u2013 for database queries and integration</li> <li>Optional but useful: Git, basic Linux, REST APIs</li> </ul> <p>Don\u2019t worry \u2014 if you\u2019re not familiar with everything yet, our training program has you covered.</p>"},{"location":"getting-started/introduction/#the-3-month-training-program","title":"\ud83d\udcda The 3-Month Training Program","text":"<p>All new hires go through a structured 3-month probation and training program. You\u2019ll be guided through:</p> <ol> <li>Foundational Java &amp; SQL modules</li> <li>ERP-specific technical training</li> <li>Hands-on project simulations</li> <li>Final assessment and review</li> </ol> <p>By the end of this program, you\u2019ll be ready to take on real client customizations with confidence.</p>"},{"location":"getting-started/introduction/#youre-not-alone","title":"\ud83d\ude4c You\u2019re Not Alone","text":"<p>We believe in team support. Throughout your onboarding, you\u2019ll have:</p> <ul> <li>Access to this documentation</li> <li>Support from senior consultants</li> <li>Regular check-ins with your mentor or team lead</li> </ul> <p>Ready to get started? Move on to the Installation Guide to set up your development environment.</p>"},{"location":"training/sql-training/","title":"SQL Training for Technical Consultants","text":"<p>Welcome to the SQL training module. This course is designed to equip new Technical Consultants with the essential SQL skills required to analyze, manipulate, and manage data effectively.</p>"},{"location":"training/sql-training/#course-objectives","title":"Course Objectives","text":"<p>By the end of this training, you should be able to: - Understand relational database concepts - Write and execute SQL queries - Manipulate data using DML (Data Manipulation Language) - Create and modify schemas using DDL (Data Definition Language) - Utilize SQL functions for analysis and reporting</p>"},{"location":"training/sql-training/#module-breakdown","title":"Module Breakdown","text":""},{"location":"training/sql-training/#1-introduction-to-databases","title":"1. Introduction to Databases","text":"<ul> <li>What is a database?</li> <li>Relational vs Non-relational databases</li> <li>Tables, Rows, and Columns</li> <li>Primary and Foreign Keys</li> </ul>"},{"location":"training/sql-training/#2-basic-sql-queries","title":"2. Basic SQL Queries","text":"<ul> <li><code>SELECT</code>, <code>FROM</code>, <code>WHERE</code></li> <li>Filtering and sorting results (<code>ORDER BY</code>, <code>LIMIT</code>)</li> <li><code>DISTINCT</code> keyword</li> </ul>"},{"location":"training/sql-training/#3-working-with-multiple-tables","title":"3. Working with Multiple Tables","text":"<ul> <li><code>JOIN</code> operations: <code>INNER</code>, <code>LEFT</code>, <code>RIGHT</code>, <code>FULL OUTER</code></li> <li>Combining datasets with <code>UNION</code> and <code>INTERSECT</code></li> </ul>"},{"location":"training/sql-training/#4-data-manipulation-language-dml","title":"4. Data Manipulation Language (DML)","text":"<ul> <li><code>INSERT INTO</code></li> <li><code>UPDATE</code></li> <li><code>DELETE</code></li> <li>Best practices for DML operations</li> </ul>"},{"location":"training/sql-training/#5-data-definition-language-ddl","title":"5. Data Definition Language (DDL)","text":"<ul> <li><code>CREATE TABLE</code>, <code>ALTER TABLE</code>, <code>DROP TABLE</code></li> <li>Setting data types and constraints</li> <li>Indexes and keys</li> </ul>"},{"location":"training/sql-training/#6-aggregate-functions-and-grouping","title":"6. Aggregate Functions and Grouping","text":"<ul> <li><code>COUNT</code>, <code>SUM</code>, <code>AVG</code>, <code>MIN</code>, <code>MAX</code></li> <li><code>GROUP BY</code> and <code>HAVING</code> clauses</li> </ul>"},{"location":"training/sql-training/#7-subqueries-and-nested-selects","title":"7. Subqueries and Nested Selects","text":"<ul> <li>Inline subqueries</li> <li>Correlated subqueries</li> <li>Use cases and optimization tips</li> </ul>"},{"location":"training/sql-training/#8-sql-functions-and-expressions","title":"8. SQL Functions and Expressions","text":"<ul> <li>String functions: <code>CONCAT</code>, <code>SUBSTR</code>, <code>UPPER</code>, <code>LOWER</code></li> <li>Date functions: <code>NOW</code>, <code>DATE_ADD</code>, <code>DATEDIFF</code></li> <li>Conditional logic: <code>CASE</code>, <code>IF</code></li> </ul>"},{"location":"training/sql-training/#9-practice-and-assessment","title":"9. Practice and Assessment","text":"<ul> <li>Real-world scenarios and sample datasets</li> <li>Exercises with solutions</li> <li>Final assessment quiz</li> </ul> <p>\ud83d\udca1 Tip: Use online tools like SQLFiddle or DB-Fiddle to practice queries without setting up a local database.</p>"},{"location":"training/sql-training/#resources","title":"Resources","text":"<ul> <li>SQLBolt</li> <li>Mode SQL Tutorial</li> <li>W3Schools SQL</li> </ul>"},{"location":"training/java/01-introduction-to-java/","title":"Introduction to Java","text":"<p>Java is a high-level, object-oriented programming language renowned for its portability, security, and rich ecosystem. It powers a wide range of applications \u2014 from enterprise software and mobile apps to backend systems and embedded devices.</p>"},{"location":"training/java/01-introduction-to-java/#what-youll-learn","title":"What You'll Learn","text":"<p>By the end of this module, you\u2019ll understand:</p> <ul> <li>The significance of Java in enterprise and ERP environments</li> <li>The roles of the JDK, JRE, and JVM in the Java ecosystem</li> <li>How to write, compile, and run your first Java application</li> <li>Why Java is often chosen for scalable, secure business solutions</li> </ul>"},{"location":"training/java/01-introduction-to-java/#why-java-matters-in-erp","title":"Why Java Matters in ERP","text":"<p>Java is a cornerstone of many ERP solutions, especially in systems that require:</p> <ul> <li>Platform independence</li> <li>Strong performance and memory management</li> <li>Integration with APIs, services, or databases</li> <li>Custom desktop tools and middleware</li> </ul> <p>\ud83d\udce6 Java is frequently used in building ERP plugins, data loaders, batch processors, and UI applications.</p>"},{"location":"training/java/01-introduction-to-java/#key-components-of-the-java-ecosystem","title":"Key Components of the Java Ecosystem","text":"<ul> <li> <p>JDK (Java Development Kit)   Contains tools and libraries needed for developing Java applications, including the compiler (<code>javac</code>).</p> </li> <li> <p>JRE (Java Runtime Environment)   Allows you to run Java applications. It includes the JVM but not the development tools.</p> </li> <li> <p>JVM (Java Virtual Machine)   Executes Java bytecode. It's what enables Java\u2019s famous \u201cwrite once, run anywhere\u201d capability.</p> </li> </ul>"},{"location":"training/java/01-introduction-to-java/#writing-your-first-java-program","title":"Writing Your First Java Program","text":"<p>Here\u2019s a basic example to get started:</p> <pre><code>public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, Java!\");\n    }\n}\n</code></pre>"},{"location":"training/java/01-introduction-to-java/#steps-to-run","title":"Steps to Run:","text":"<ol> <li>Save the file as <code>HelloWorld.java</code></li> <li>Compile it with:    <code>bash    javac HelloWorld.java</code></li> <li>Run it with:    <code>bash    java HelloWorld</code></li> </ol> <p>\ud83e\uddea You\u2019ve just written your first Java program!</p>"},{"location":"training/java/01-introduction-to-java/#recommended-tools","title":"Recommended Tools","text":"<ul> <li>IDEs: IntelliJ IDEA, Eclipse, or VS Code with Java extensions</li> <li>JDK Version: Use LTS versions like Java 17 for stability</li> <li>Build Tools: Familiarize with Maven or Gradle for project management</li> </ul>"},{"location":"training/java/01-introduction-to-java/#summary","title":"Summary","text":"<p>Java is a versatile and robust language that has stood the test of time in enterprise development. Its extensive libraries, community support, and cross-platform capabilities make it a natural fit for ERP-related applications and tools.</p> <p>\ud83e\udde0 Tip: Set up a development environment early. The quicker you can write and test Java code, the faster you\u2019ll learn and apply it to ERP scenarios.</p>"},{"location":"training/java/02-java-basics/","title":"Java Basics","text":"<p>This module introduces the fundamental building blocks of the Java programming language. These core concepts are essential for developing reliable and maintainable ERP components, integrations, and utilities.</p>"},{"location":"training/java/02-java-basics/#variables-data-types","title":"Variables &amp; Data Types","text":"<p>In Java, variables are containers that hold data values. Each variable has a data type, defining the kind of data it can store.</p>"},{"location":"training/java/02-java-basics/#common-primitive-types","title":"Common Primitive Types:","text":"<ul> <li><code>int</code> \u2013 Whole numbers (e.g., <code>100</code>)</li> <li><code>double</code> \u2013 Decimal numbers (e.g., <code>99.99</code>)</li> <li><code>char</code> \u2013 A single character (e.g., <code>'A'</code>)</li> <li><code>boolean</code> \u2013 True/false logic</li> <li><code>String</code> \u2013 Sequence of characters (technically not primitive, but used like one)</li> </ul> <pre><code>int quantity = 150;\ndouble price = 129.99;\nchar category = 'B';\nboolean isActive = true;\nString productName = \"Laptop\";\n</code></pre>"},{"location":"training/java/02-java-basics/#control-flow-statements","title":"Control Flow Statements","text":"<p>Control flow allows your program to make decisions and repeat actions.</p>"},{"location":"training/java/02-java-basics/#conditional-statements","title":"Conditional Statements","text":"<ul> <li><code>if</code>, <code>else</code>, <code>else if</code> \u2013 Basic condition checks</li> <li><code>switch</code> \u2013 Multi-branch selection</li> </ul> <pre><code>if (stock &lt; 100) {\n    System.out.println(\"Reorder needed\");\n} else {\n    System.out.println(\"Stock is sufficient\");\n}\n</code></pre>"},{"location":"training/java/02-java-basics/#looping-constructs","title":"Looping Constructs","text":"<ul> <li><code>for</code> \u2013 Fixed iteration count</li> <li><code>while</code> \u2013 Loops while condition is true</li> <li><code>do-while</code> \u2013 Ensures at least one execution</li> </ul> <pre><code>for (int i = 0; i &lt; 10; i++) {\n    System.out.println(\"Invoice #\" + i);\n}\n</code></pre>"},{"location":"training/java/02-java-basics/#erp-relevant-use-cases","title":"ERP-Relevant Use Cases","text":"<ul> <li>\ud83d\udce6 Inventory Threshold Automation:   Use <code>if</code> statements to trigger reorder alerts when stock is low.</li> <li>\ud83e\uddfe Batch Processing:   Use <code>for</code> or <code>while</code> loops to process large batches of transactions or records.</li> <li>\ud83e\udde0 Business Logic Mapping:   Use <code>switch</code> to map ERP codes to human-readable statuses.</li> </ul>"},{"location":"training/java/02-java-basics/#best-practices","title":"Best Practices","text":"<ul> <li>\u2705 Always initialize variables before use.</li> <li>\ud83e\udde0 Choose the right data type \u2014 it affects memory usage and performance.</li> <li>\ud83e\uddea Keep control flow readable and simple \u2014 avoid deep nesting.</li> <li>\ud83d\udcdb Use <code>final</code> for constants or configuration values.</li> </ul>"},{"location":"training/java/02-java-basics/#summary","title":"Summary","text":"<p>Understanding variables and control structures is the first step toward building dynamic, interactive ERP features. Whether automating stock management or creating condition-based workflows, these fundamentals will serve as the core of your Java development skills.</p> <p>\ud83e\udde0 Tip: Practice writing small programs that simulate real ERP tasks \u2014 like checking inventory, generating invoices, or applying discounts.</p>"},{"location":"training/java/03-oop-concepts/","title":"Object-Oriented Programming in Java","text":"<p>Java is built around the principles of Object-Oriented Programming (OOP) \u2014 a paradigm that models software based on real-world entities. Mastering OOP is essential for building maintainable, scalable, and modular ERP applications.</p>"},{"location":"training/java/03-oop-concepts/#why-oop-matters-in-erp","title":"Why OOP Matters in ERP","text":"<p>ERP systems consist of entities like Customers, Orders, Invoices, and Products. Using OOP allows developers to represent these entities as objects, encapsulate their behavior, and build flexible business logic.</p>"},{"location":"training/java/03-oop-concepts/#core-oop-concepts","title":"Core OOP Concepts","text":""},{"location":"training/java/03-oop-concepts/#1-class-object","title":"1. Class &amp; Object","text":"<ul> <li>A class defines a blueprint for objects.</li> <li>An object is an instance of a class.</li> </ul> <pre><code>class Product {\n    String name;\n    double price;\n\n    void display() {\n        System.out.println(name + \": $\" + price);\n    }\n}\n\nProduct item = new Product();\nitem.name = \"Laptop\";\nitem.price = 999.99;\nitem.display();\n</code></pre>"},{"location":"training/java/03-oop-concepts/#2-encapsulation","title":"2. Encapsulation","text":"<p>Encapsulation hides internal state and requires all interaction to be performed through an object's methods.</p> <pre><code>class Customer {\n    private String name;\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n}\n</code></pre> <p>\ud83d\udd10 Improves data security and integrity in ERP modules.</p>"},{"location":"training/java/03-oop-concepts/#3-inheritance","title":"3. Inheritance","text":"<p>Allows a class to inherit fields and methods from another class.</p> <pre><code>class Employee {\n    String name;\n}\n\nclass Manager extends Employee {\n    int teamSize;\n}\n</code></pre> <p>\ud83e\uddec Used to share common functionality between ERP entities (e.g., Users \u2192 Employees \u2192 Managers).</p>"},{"location":"training/java/03-oop-concepts/#4-polymorphism","title":"4. Polymorphism","text":"<p>Allows one interface to be used for different data types or implementations.</p> <pre><code>class Report {\n    void generate() {\n        System.out.println(\"Generating report...\");\n    }\n}\n\nclass SalesReport extends Report {\n    void generate() {\n        System.out.println(\"Generating sales report...\");\n    }\n}\n</code></pre> <p>\ud83d\udd01 Improves code flexibility and extensibility \u2014 useful for reporting modules.</p>"},{"location":"training/java/03-oop-concepts/#5-abstraction-interfaces","title":"5. Abstraction &amp; Interfaces","text":"<p>Hide unnecessary details and expose only the essential parts. Interfaces define contracts for what a class must do.</p> <pre><code>interface Payable {\n    void processPayment();\n}\n\nclass Invoice implements Payable {\n    public void processPayment() {\n        // implementation\n    }\n}\n</code></pre> <p>\ud83c\udfaf Used for defining ERP component behaviors like \u201cPayable,\u201d \u201cExportable,\u201d or \u201cAuditable.\u201d</p>"},{"location":"training/java/03-oop-concepts/#erp-use-cases","title":"ERP Use Cases","text":"<ul> <li>\ud83e\uddfe Class-based modeling for Customers, Products, and Orders</li> <li>\u2699\ufe0f Inheritance and interfaces for reusable business logic</li> <li>\ud83d\udd04 Polymorphic methods for processing different types of transactions</li> <li>\ud83e\udde9 Encapsulation for securing sensitive data (e.g., payroll, tax information)</li> </ul>"},{"location":"training/java/03-oop-concepts/#summary","title":"Summary","text":"<p>OOP is more than a coding style \u2014 it\u2019s a methodology for building modular, reusable, and efficient ERP systems. With strong object modeling, your Java-based ERP components will be easier to maintain, extend, and scale.</p> <p>\ud83e\udde0 Tip: Think in terms of \u201cobjects\u201d that reflect your ERP's real-world entities \u2014 and then add logic through methods that align with business rules.</p>"},{"location":"training/java/04-exception-handling/","title":"Exception Handling","text":"<p>Exception handling makes your programs more resilient and user-friendly.</p>"},{"location":"training/java/04-exception-handling/#basic-structure","title":"Basic Structure","text":"<pre><code>try {\n    int result = 10 / 0;\n} catch (ArithmeticException e) {\n    System.out.println(\"Cannot divide by zero\");\n} finally {\n    System.out.println(\"Cleanup done\");\n}\n</code></pre>"},{"location":"training/java/04-exception-handling/#erp-relevance","title":"ERP Relevance","text":"<p>Handle input errors gracefully during data entry or file uploads.</p>"},{"location":"training/java/05-java-collections/","title":"Exception Handling","text":"<p>Exception handling in Java enables your programs to respond gracefully to runtime errors, improving both reliability and user experience. It\u2019s especially important in ERP environments, where stability and predictable behavior are critical for business operations.</p>"},{"location":"training/java/05-java-collections/#why-exception-handling-matters","title":"Why Exception Handling Matters","text":"<p>In real-world applications, many things can go wrong: - Missing or invalid user input - File read/write failures - Network outages - Database connection issues</p> <p>Without proper exception handling, these problems can crash your application or leave systems in an inconsistent state.</p>"},{"location":"training/java/05-java-collections/#basic-try-catch-structure","title":"Basic Try-Catch Structure","text":"<pre><code>try {\n    int result = 10 / 0;\n} catch (ArithmeticException e) {\n    System.out.println(\"Cannot divide by zero\");\n} finally {\n    System.out.println(\"Cleanup done\");\n}\n</code></pre> <ul> <li><code>try</code> \u2013 Code that might throw an exception</li> <li><code>catch</code> \u2013 Block that handles the exception</li> <li><code>finally</code> \u2013 Runs whether or not an exception occurs (often used for cleanup)</li> </ul>"},{"location":"training/java/05-java-collections/#common-exception-types","title":"Common Exception Types","text":"Exception Type Description <code>NullPointerException</code> Accessing members on a <code>null</code> object <code>ArrayIndexOutOfBoundsException</code> Indexing past array length <code>IOException</code> File read/write errors <code>SQLException</code> Database access issues <code>IllegalArgumentException</code> Invalid method input"},{"location":"training/java/05-java-collections/#erp-use-cases","title":"ERP Use Cases","text":"<ul> <li>\ud83d\udce5 File Upload Validation: Catch file format or size mismatches.</li> <li>\ud83e\uddfe Data Entry Errors: Gracefully handle missing or malformed user input.</li> <li>\ud83d\udcbe Database Operations: Retry or rollback on connection or query failure.</li> <li>\ud83e\uddf9 Batch Jobs: Ensure logs are written and resources are closed even if the process fails.</li> </ul>"},{"location":"training/java/05-java-collections/#best-practices","title":"Best Practices","text":"<ul> <li>\u2705 Be specific: Catch exact exception types when possible.</li> <li>\ud83e\uddfc Clean up resources using <code>finally</code> or try-with-resources.</li> <li>\ud83e\udded Don\u2019t silently ignore errors \u2014 always log them.</li> <li>\ud83d\udd01 Consider retry logic for recoverable issues (e.g., network or temporary DB outages).</li> <li>\ud83d\udce6 Use custom exceptions to represent domain-specific failures (e.g., <code>InvalidInvoiceException</code>).</li> </ul>"},{"location":"training/java/05-java-collections/#summary","title":"Summary","text":"<p>Exception handling helps you build fault-tolerant, user-friendly, and stable applications \u2014 a must for ERP systems that handle sensitive and mission-critical operations.</p> <p>\ud83e\udde0 Tip: Design your system to expect failure \u2014 catch exceptions, report them clearly, and recover wherever possible.</p>"},{"location":"training/java/06-working-with-files/","title":"Working with Files in Java","text":"<p>File I/O (Input/Output) allows Java programs to read from and write to external files. In ERP systems, this is essential for tasks like importing transactional data, generating reports, processing logs, or interfacing with third-party systems.</p>"},{"location":"training/java/06-working-with-files/#why-file-io-matters-in-erp","title":"Why File I/O Matters in ERP","text":"<p>ERP systems frequently deal with file operations: - Importing inventory updates from suppliers (CSV, XML) - Generating printable reports or invoices (TXT, PDF) - Integrating with legacy systems via flat files - Archiving daily transaction logs</p>"},{"location":"training/java/06-working-with-files/#reading-a-file","title":"Reading a File","text":"<pre><code>import java.io.*;\n\npublic class FileReaderExample {\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new FileReader(\"input.txt\"));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n        reader.close();\n    }\n}\n</code></pre> <p>\ud83d\udce5 This reads a text file line by line and prints each line to the console.</p>"},{"location":"training/java/06-working-with-files/#writing-to-a-file","title":"Writing to a File","text":"<pre><code>import java.io.*;\n\npublic class FileWriterExample {\n    public static void main(String[] args) throws IOException {\n        BufferedWriter writer = new BufferedWriter(new FileWriter(\"output.txt\"));\n        writer.write(\"ERP file export complete.\");\n        writer.newLine();\n        writer.write(\"Timestamp: \" + System.currentTimeMillis());\n        writer.close();\n    }\n}\n</code></pre> <p>\ud83d\udce4 Useful for generating logs, summaries, or exports.</p>"},{"location":"training/java/06-working-with-files/#modern-approach-java-nio","title":"Modern Approach (Java NIO)","text":"<pre><code>import java.nio.file.*;\nimport java.util.*;\n\nList&lt;String&gt; lines = Files.readAllLines(Paths.get(\"input.txt\"));\nlines.forEach(System.out::println);\n</code></pre> <p>\u26a1 Simplifies file handling and reduces boilerplate code.</p>"},{"location":"training/java/06-working-with-files/#erp-scenarios","title":"ERP Scenarios","text":"<ul> <li>\ud83d\udcc8 Sales Report Parsing: Read monthly reports and extract KPIs.</li> <li>\ud83d\udce6 Inventory Import: Load product quantities from supplier feeds.</li> <li>\ud83e\uddfe Audit Logging: Write logs for transaction success/failure tracking.</li> <li>\ud83e\uddf7 Data Archiving: Export data snapshots for backup and compliance.</li> </ul>"},{"location":"training/java/06-working-with-files/#best-practices","title":"Best Practices","text":"<ul> <li>\u2705 Always close streams (<code>.close()</code> or use try-with-resources).</li> <li>\u26a0\ufe0f Handle <code>IOException</code> with appropriate messages and recovery logic.</li> <li>\ud83d\uddc2 Use relative paths or configuration-based file paths for portability.</li> <li>\ud83e\uddea Validate file content before processing (e.g., format, headers).</li> </ul>"},{"location":"training/java/06-working-with-files/#summary","title":"Summary","text":"<p>File handling in Java is a foundational skill for ERP developers, enabling data interchange and batch processing. Whether importing records or exporting logs, efficient file operations can drastically improve business process automation.</p> <p>\ud83e\udde0 Tip: Combine file reading with Java Collections to parse and transform ERP data on the fly.</p>"},{"location":"training/java/07-jdbc-database-integration/","title":"JDBC and Database Integration","text":"<p>JDBC (Java Database Connectivity) is the standard Java API used to connect and interact with relational databases like MySQL, PostgreSQL, Oracle, and SQL Server. In ERP development, JDBC is essential for querying, inserting, updating, and managing business-critical data.</p>"},{"location":"training/java/07-jdbc-database-integration/#why-jdbc-matters-in-erp","title":"Why JDBC Matters in ERP","text":"<p>ERP systems are built on top of structured databases that store everything from product catalogs to customer invoices. JDBC allows you to build custom modules, reports, or integrations that communicate directly with these databases.</p>"},{"location":"training/java/07-jdbc-database-integration/#basic-jdbc-workflow","title":"Basic JDBC Workflow","text":"<ol> <li>Load Database Driver (automatically handled in newer JDBC versions)</li> <li>Establish a Connection</li> <li>Create and Execute SQL Statements</li> <li>Process the Results</li> <li>Close Resources</li> </ol>"},{"location":"training/java/07-jdbc-database-integration/#example-querying-data","title":"Example: Querying Data","text":"<pre><code>import java.sql.*;\n\npublic class OrderFetcher {\n    public static void main(String[] args) throws SQLException {\n        String url = \"jdbc:mysql://localhost:3306/erpdb\";\n        String user = \"erpuser\";\n        String pass = \"securePass123\";\n\n        Connection conn = DriverManager.getConnection(url, user, pass);\n        PreparedStatement ps = conn.prepareStatement(\"SELECT * FROM orders\");\n        ResultSet rs = ps.executeQuery();\n\n        while (rs.next()) {\n            System.out.println(\"Order ID: \" + rs.getInt(\"order_id\"));\n        }\n\n        rs.close();\n        ps.close();\n        conn.close();\n    }\n}\n</code></pre> <p>\ud83d\udce6 This example fetches and prints order IDs from an <code>orders</code> table.</p>"},{"location":"training/java/07-jdbc-database-integration/#erp-integration-scenarios","title":"ERP Integration Scenarios","text":"<ul> <li>\ud83e\uddfe Custom Report Modules: Fetch sales or invoice data based on dynamic filters.</li> <li>\ud83d\udce6 Inventory Sync Tools: Pull stock levels for real-time availability.</li> <li>\ud83d\udd04 ETL Pipelines: Extract data to push into external BI or analytics platforms.</li> <li>\ud83e\uddd1\u200d\ud83d\udcbc User Management Tools: Update or validate user records.</li> </ul>"},{"location":"training/java/07-jdbc-database-integration/#best-practices","title":"Best Practices","text":"<ul> <li>\u2705 Always close ResultSet, PreparedStatement, and Connection objects.</li> <li>\ud83e\uddf0 Use PreparedStatements to prevent SQL injection and improve performance.</li> <li>\ud83e\uddea Validate connections and handle exceptions gracefully.</li> <li>\u2699\ufe0f Use a connection pool (like HikariCP or Apache DBCP) for large-scale ERP systems.</li> <li>\ud83d\udcca Combine JDBC with Java Collections for flexible data processing.</li> </ul>"},{"location":"training/java/07-jdbc-database-integration/#summary","title":"Summary","text":"<p>JDBC is a powerful bridge between Java applications and ERP databases. Whether building lightweight admin tools, automated schedulers, or reporting features, understanding JDBC is essential for ERP technical consultants and backend developers.</p> <p>\ud83e\udde0 Tip: Start small \u2014 build a basic tool to fetch recent orders or customers, then scale to more advanced data operations.</p>"},{"location":"training/java/08-java-for-erp/","title":"Java for ERP","text":"<p>Java plays a critical role in ERP environments thanks to its scalability, portability, and ability to integrate with diverse systems. From custom business logic to file processing and database synchronization, Java empowers developers to extend and optimize ERP systems to meet unique organizational needs.</p>"},{"location":"training/java/08-java-for-erp/#why-java-works-well-in-erp","title":"Why Java Works Well in ERP","text":"<p>ERP systems require:</p> <ul> <li>High-performance backend processes</li> <li>Platform-independent modules</li> <li>Secure and reliable integrations</li> <li>Custom automation tools</li> </ul> <p>Java\u2019s object-oriented design and extensive ecosystem make it ideal for addressing these requirements in both on-premise and cloud-based ERP environments.</p>"},{"location":"training/java/08-java-for-erp/#common-use-cases-for-java-in-erp","title":"Common Use Cases for Java in ERP","text":"<ul> <li> <p>\ud83d\udcca Custom Reports:   Generate and format business reports using Java logic and JDBC or export data into PDFs, Excel, or CSV formats.</p> </li> <li> <p>\u2699\ufe0f Business Logic Layers:   Implement custom logic outside the ERP core \u2014 such as tax calculations, batch pricing updates, or approval workflows.</p> </li> <li> <p>\ud83d\udd04 Middleware for Synchronization:   Build bridges between ERP and other systems like CRMs, POS systems, e-commerce platforms, or mobile apps.</p> </li> <li> <p>\ud83d\udce5 Automated File Processing:   Java utilities can scan folders, parse incoming CSV/XML files, validate content, and insert clean data into ERP tables.</p> </li> <li> <p>\ud83d\udd10 Security &amp; Access Control:   Develop role-based access utilities or logging/audit trail features for ERP users and processes.</p> </li> </ul>"},{"location":"training/java/08-java-for-erp/#example-syncing-local-csv-to-erp-database","title":"Example: Syncing Local CSV to ERP Database","text":"<pre><code>// Simplified example concept\nBufferedReader reader = new BufferedReader(new FileReader(\"inventory.csv\"));\nString line;\nwhile ((line = reader.readLine()) != null) {\n    String[] data = line.split(\",\");\n    // Insert data into ERP using JDBC\n}\nreader.close();\n</code></pre> <p>\ud83e\uddfe This is a foundation for automating data imports (e.g., daily stock updates or transaction uploads).</p>"},{"location":"training/java/08-java-for-erp/#tools-libraries-commonly-used","title":"Tools &amp; Libraries Commonly Used","text":"<ul> <li><code>Apache POI</code> \u2013 Exporting Excel reports</li> <li><code>OpenCSV</code> / <code>Jackson</code> \u2013 CSV/JSON parsing</li> <li><code>Quartz</code> \u2013 Scheduling batch jobs</li> <li><code>Spring Framework</code> \u2013 Enterprise-grade Java application development</li> <li><code>JasperReports</code> \u2013 Report generation for ERP dashboards</li> </ul>"},{"location":"training/java/08-java-for-erp/#summary","title":"Summary","text":"<p>Java\u2019s flexibility makes it a go-to language for extending ERP capabilities. Whether integrating data, building standalone utilities, or automating file workflows, Java empowers ERP developers and consultants to meet evolving business requirements effectively.</p> <p>\ud83e\udde0 Tip: Learn to combine JDBC, file I/O, and Java collections \u2014 this trio forms the core of many ERP integration tools.</p>"},{"location":"training/java/09-final-project-assessment/","title":"Final Project and Assessment","text":"<p>Conclude your Java training by applying what you've learned to build a mini-ERP solution. This hands-on project will showcase your understanding of OOP, file handling, database integration, and error management in a real-world ERP scenario.</p>"},{"location":"training/java/09-final-project-assessment/#project-objective","title":"\ud83c\udfaf Project Objective","text":"<p>Design and implement a small-scale ERP-related tool using Java. It should simulate a business process such as tracking orders, managing inventory, or processing transactions.</p>"},{"location":"training/java/09-final-project-assessment/#project-ideas","title":"\ud83d\udca1 Project Ideas","text":"<p>Choose or adapt one of the following sample projects:</p> <ul> <li>Customer Order Tracker</li> <li>Input: Order entries via console or CSV</li> <li> <p>Output: Generates summaries, flags delays, etc.</p> </li> <li> <p>Inventory Level Notifier</p> </li> <li>Reads stock levels and alerts when below threshold</li> <li> <p>Outputs logs or sends alerts (console/file/email)</p> </li> <li> <p>Transaction Importer</p> </li> <li>Imports sales or payment data from CSV</li> <li>Validates and stores records in a database</li> </ul> <p>Feel free to define your own project based on a real ERP problem you\u2019d like to solve.</p>"},{"location":"training/java/09-final-project-assessment/#project-requirements","title":"\u2705 Project Requirements","text":"<p>Ensure your project includes the following:</p> Component Description \ud83e\uddf1 OOP Design Use classes, inheritance, and encapsulation appropriately \ud83d\udcc2 File I/O Read from or write to external files (CSV, TXT, etc.) \ud83d\uddc3\ufe0f DB Integration Use JDBC to fetch or store data (optional but recommended) \ud83d\udd10 Error Handling Handle exceptions and edge cases gracefully \ud83d\udcc4 Documentation Include inline comments and a README-style description of your project"},{"location":"training/java/09-final-project-assessment/#evaluation-criteria","title":"\ud83e\uddea Evaluation Criteria","text":"<p>Your project will be assessed on:</p> Category Description \u2728 Code Quality Readability, modularity, and use of best practices \u2699\ufe0f Functionality Does the tool fulfill its intended purpose and handle real-world input? \ud83e\udde0 Understanding Demonstrated grasp of Java concepts through clean logic and structure \ud83c\udfa4 Presentation Ability to explain your project, structure, and design choices"},{"location":"training/java/09-final-project-assessment/#submission-guidelines","title":"\ud83d\ude80 Submission Guidelines","text":"<ul> <li>Include your <code>.java</code> source files and any data files (CSV, etc.)</li> <li>Submit a <code>README.md</code> with:</li> <li>Project summary</li> <li>How to run the application</li> <li>Sample input/output</li> <li>Optional: Create a short demo video or GIF walkthrough</li> </ul>"},{"location":"training/java/09-final-project-assessment/#final-thoughts","title":"Final Thoughts","text":"<p>This project is your opportunity to connect theory to practice and demonstrate how Java can be used to build ERP utilities that solve real business problems.</p> <p>\ud83e\udde0 Tip: Focus on building something functional first. Once it works, refactor and polish!</p>"},{"location":"training/sql/01-introduction-to-databases/","title":"Introduction to Databases","text":"<p>Understanding databases is a fundamental skill for any Technical Consultant, especially when working with Enterprise Resource Planning (ERP) systems. ERP applications rely heavily on structured, relational databases to store and manage large volumes of data across different business functions.</p>"},{"location":"training/sql/01-introduction-to-databases/#what-is-a-database","title":"What is a Database?","text":"<p>A database is a systematic and organized collection of data that is electronically stored and accessed using computer systems. It enables users to efficiently store, retrieve, update, and manage information, ensuring data integrity, consistency, and accessibility.</p> <p>Databases are the backbone of modern applications \u2014 from banking systems and e-commerce platforms to large-scale ERP solutions.</p>"},{"location":"training/sql/01-introduction-to-databases/#why-databases-matter-in-erp","title":"Why Databases Matter in ERP","text":"<p>ERP systems integrate various business processes, such as finance, inventory, sales, and human resources. Each module relies on accurate, real-time data stored in the underlying database. As a Technical Consultant, your ability to understand and query this data is crucial for system customization, reporting, and troubleshooting.</p>"},{"location":"training/sql/01-introduction-to-databases/#types-of-databases","title":"Types of Databases","text":"<ul> <li>Relational Databases (RDBMS):</li> <li>Organize data into structured tables with predefined relationships.</li> <li>Use SQL (Structured Query Language) for data manipulation.</li> <li>Examples: MySQL, PostgreSQL, Oracle Database, Microsoft SQL Server.</li> <li> <p>Commonly used in ERP systems due to their strong consistency and support for complex queries.</p> </li> <li> <p>Non-relational Databases (NoSQL):</p> </li> <li>Store data in flexible formats like documents, key-value pairs, graphs, or wide-columns.</li> <li>Offer high scalability and performance for unstructured or semi-structured data.</li> <li>Examples: MongoDB (document), Redis (key-value), Cassandra (wide-column), Neo4j (graph).</li> <li>Used in scenarios where flexibility and speed are prioritized over strict consistency.</li> </ul>"},{"location":"training/sql/01-introduction-to-databases/#core-components-of-a-relational-database","title":"Core Components of a Relational Database","text":"<ul> <li>Tables \u2013 Represent entities such as customers, orders, or products.</li> <li>Rows \u2013 Each row is a unique record or instance of an entity.</li> <li>Columns \u2013 Define the attributes or fields of the entity (e.g., Customer Name, Email).</li> </ul>"},{"location":"training/sql/01-introduction-to-databases/#example","title":"Example","text":"CustomerID Name Email 1 Jane Smith jane@example.com 2 John Doe john.doe@example.com"},{"location":"training/sql/01-introduction-to-databases/#primary-keys-and-relationships","title":"Primary Keys and Relationships","text":"<ul> <li>A Primary Key is a unique identifier for each record in a table (e.g., CustomerID).</li> <li>Foreign Keys create relationships between tables (e.g., linking Orders to Customers).</li> <li>Understanding these relationships is essential for writing efficient and meaningful SQL queries.</li> </ul>"},{"location":"training/sql/01-introduction-to-databases/#conclusion","title":"Conclusion","text":"<p>Grasping the structure and function of databases lays the groundwork for advanced topics such as SQL queries, data modeling, database design, and performance optimization. As you progress through this training, you'll gain hands-on experience working with real ERP data models to solidify these concepts.</p> <p>\u2705 Tip: Always be mindful of how data flows between ERP modules and how relational integrity is maintained across tables.</p>"},{"location":"training/sql/02-basic-sql-queries/","title":"Basic SQL Queries","text":"<p>Structured Query Language (SQL) is the universal language for accessing and manipulating data in relational databases. Mastering SQL is essential for Technical Consultants working with ERP systems, as it enables you to retrieve, analyze, and act on critical business data efficiently.</p>"},{"location":"training/sql/02-basic-sql-queries/#select-statement","title":"SELECT Statement","text":"<p>The <code>SELECT</code> statement is the cornerstone of SQL. It allows you to retrieve specific columns or entire rows from one or more tables.</p> <pre><code>SELECT customer_name, phone_number\nFROM customers;\n</code></pre> <p>\u2705 Use <code>SELECT</code> to fetch only the fields you need \u2014 this improves performance and readability.</p>"},{"location":"training/sql/02-basic-sql-queries/#filtering-with-where","title":"Filtering with WHERE","text":"<p>The <code>WHERE</code> clause helps filter records based on specified conditions, allowing for more targeted queries.</p> <pre><code>SELECT * \nFROM orders\nWHERE order_status = 'Pending';\n</code></pre> <p>\ud83d\udd0e Ideal for pulling up current tasks, exceptions, or filtered business records (e.g., unpaid invoices).</p>"},{"location":"training/sql/02-basic-sql-queries/#sorting-results-with-order-by","title":"Sorting Results with ORDER BY","text":"<p>Use <code>ORDER BY</code> to sort results by one or more columns. Add <code>ASC</code> (ascending) or <code>DESC</code> (descending) to control sort direction.</p> <pre><code>SELECT product_name, price\nFROM products\nORDER BY price DESC;\n</code></pre> <p>\ud83d\udcca Common use cases include viewing the most expensive items, latest transactions, or top-selling products.</p>"},{"location":"training/sql/02-basic-sql-queries/#limiting-results-with-limit","title":"Limiting Results with LIMIT","text":"<p><code>LIMIT</code> is used to restrict the number of rows returned \u2014 useful for performance and previews.</p> <pre><code>SELECT * \nFROM inventory\nLIMIT 5;\n</code></pre> <p>\ud83d\udca1 Use it when validating queries or previewing data without overloading the output.</p>"},{"location":"training/sql/02-basic-sql-queries/#eliminating-duplicates-with-distinct","title":"Eliminating Duplicates with DISTINCT","text":"<p><code>DISTINCT</code> returns unique values from a column, which is useful when summarizing or identifying patterns.</p> <pre><code>SELECT DISTINCT customer_city\nFROM customers;\n</code></pre> <p>\ud83c\udf0d This helps you understand geographic distribution or prevent duplicate reporting.</p>"},{"location":"training/sql/02-basic-sql-queries/#practical-erp-scenarios","title":"Practical ERP Scenarios","text":"<ul> <li>\ud83d\udd39 Show all invoices where the status is <code>Unpaid</code></li> <li>\ud83d\udd39 List all products that are currently out of stock</li> <li>\ud83d\udd39 Retrieve the five most recent customer registrations</li> <li>\ud83d\udd39 View a list of unique vendors supplying inventory items</li> </ul>"},{"location":"training/sql/02-basic-sql-queries/#summary","title":"Summary","text":"<p>Basic SQL queries are powerful tools that give you direct access to the data underpinning ERP modules. By mastering commands like <code>SELECT</code>, <code>WHERE</code>, <code>ORDER BY</code>, and <code>LIMIT</code>, you can gain immediate insights, troubleshoot issues, and support data-driven decision-making.</p> <p>\ud83e\udde0 Tip: Always validate your queries in a test environment before executing them on production systems.</p>"},{"location":"training/sql/03-working-with-multiple-tables/","title":"Working with Multiple Tables","text":"<p>In real-world ERP systems, data is rarely confined to a single table. Information is normalized and distributed across multiple related tables for efficiency and integrity. To analyze or report on this data, you need to join these tables together.</p>"},{"location":"training/sql/03-working-with-multiple-tables/#understanding-joins-in-sql","title":"Understanding JOINs in SQL","text":"<p>A JOIN allows you to combine rows from two or more tables based on a related column between them \u2014 usually a foreign key relationship.</p>"},{"location":"training/sql/03-working-with-multiple-tables/#inner-join","title":"INNER JOIN","text":"<p>Returns only the records that have matching values in both tables.</p> <pre><code>SELECT orders.order_id, customers.customer_name\nFROM orders\nINNER JOIN customers ON orders.customer_id = customers.customer_id;\n</code></pre> <p>\ud83e\uddfe Useful for retrieving order details along with customer information.</p>"},{"location":"training/sql/03-working-with-multiple-tables/#left-join-or-left-outer-join","title":"LEFT JOIN (or LEFT OUTER JOIN)","text":"<p>Returns all records from the left table, and the matched records from the right table. If there's no match, NULLs are returned for the right side.</p> <pre><code>SELECT products.product_name, inventory.stock_level\nFROM products\nLEFT JOIN inventory ON products.product_id = inventory.product_id;\n</code></pre> <p>\ud83d\udce6 Helpful when identifying products that exist but are not yet stocked.</p>"},{"location":"training/sql/03-working-with-multiple-tables/#right-join-or-right-outer-join","title":"RIGHT JOIN (or RIGHT OUTER JOIN)","text":"<p>Returns all records from the right table, and the matched records from the left. If there's no match, NULLs are returned for the left side.</p> <pre><code>SELECT inventory.stock_level, products.product_name\nFROM inventory\nRIGHT JOIN products ON inventory.product_id = products.product_id;\n</code></pre> <p>\ud83d\udd01 Less common in ERP but useful when prioritizing a secondary table like stock.</p>"},{"location":"training/sql/03-working-with-multiple-tables/#full-outer-join","title":"FULL OUTER JOIN","text":"<p>Returns all records when there's a match in either table. If no match, NULLs are filled in accordingly.</p> <p>\ud83d\udd04 Not all database engines (like MySQL) support FULL OUTER JOIN directly \u2014 alternatives include using <code>UNION</code>.</p> <pre><code>SELECT customer_name, order_id\nFROM customers\nFULL OUTER JOIN orders ON customers.customer_id = orders.customer_id;\n</code></pre>"},{"location":"training/sql/03-working-with-multiple-tables/#erp-use-cases-for-joins","title":"ERP Use Cases for JOINs","text":"<ul> <li>\ud83e\uddfe Combine customer and order details for invoicing</li> <li>\ud83d\udce6 List all products including those not currently in inventory</li> <li>\ud83d\udcb3 Match payments with invoices for aging reports</li> <li>\ud83d\udd17 Link employee records to their departmental info</li> </ul>"},{"location":"training/sql/03-working-with-multiple-tables/#best-practices-for-multi-table-queries","title":"Best Practices for Multi-Table Queries","text":"<ul> <li>Use aliases (e.g., <code>c</code> for <code>customers</code>) to improve query readability.</li> <li>Always define join conditions clearly to avoid Cartesian products.</li> <li>Limit result sets with <code>WHERE</code> or <code>LIMIT</code> to test before running large joins.</li> <li>Use INNER JOIN when you only need records with a clear relationship.</li> <li>Use LEFT JOIN when the presence of the left-side data is mandatory.</li> </ul>"},{"location":"training/sql/03-working-with-multiple-tables/#summary","title":"Summary","text":"<p>Joining tables is one of the most powerful techniques in SQL. In the context of ERP, it enables you to correlate information across business modules \u2014 such as linking customers, orders, invoices, and payments \u2014 to build meaningful reports and perform critical analysis.</p> <p>\ud83e\udde0 Tip: Understand entity relationships in your ERP schema. This knowledge will guide you in choosing the right type of JOIN for each scenario.</p>"},{"location":"training/sql/04-dml/","title":"Data Manipulation Language (DML)","text":"<p>Data Manipulation Language (DML) includes the SQL commands that allow you to insert, update, and delete records in a relational database. These operations are essential for maintaining up-to-date and accurate information within ERP systems.</p> <p>As a Technical Consultant, you\u2019ll use DML to support real-time business operations such as managing inventory levels, updating pricing, and cleaning out deprecated records.</p>"},{"location":"training/sql/04-dml/#insert-into-adding-new-records","title":"INSERT INTO \u2013 Adding New Records","text":"<p>Used to insert new rows into a table.</p> <pre><code>INSERT INTO suppliers (name, city)\nVALUES ('ABC Supplies', 'Jakarta');\n</code></pre> <p>\u2705 Use this when onboarding new vendors, customers, or adding records to master data tables.</p>"},{"location":"training/sql/04-dml/#update-modifying-existing-data","title":"UPDATE \u2013 Modifying Existing Data","text":"<p>Used to change data in existing records. Always use a <code>WHERE</code> clause to avoid unintended bulk updates.</p> <pre><code>UPDATE products\nSET price = 150000\nWHERE product_id = 101;\n</code></pre> <p>\ud83d\udee0\ufe0f Common for price adjustments, account updates, or correcting erroneous data.</p>"},{"location":"training/sql/04-dml/#delete-removing-records","title":"DELETE \u2013 Removing Records","text":"<p>Deletes one or more records from a table. Use with extreme caution.</p> <pre><code>DELETE FROM customers\nWHERE customer_id = 305;\n</code></pre> <p>\u26a0\ufe0f Ensure you are not deleting active or referenced records. Always back up data before running delete operations.</p>"},{"location":"training/sql/04-dml/#erp-use-cases","title":"ERP Use Cases","text":"<ul> <li>\ud83d\udce6 Update inventory stock levels after a shipment</li> <li>\ud83c\udfe2 Add a new warehouse or location into the system</li> <li>\ud83d\uded1 Remove discontinued products from the catalog</li> <li>\ud83d\udc64 Correct customer contact details</li> <li>\ud83d\udcb0 Adjust pricing due to seasonal promotions or inflation</li> </ul>"},{"location":"training/sql/04-dml/#best-practices-for-dml","title":"Best Practices for DML","text":"<ul> <li>\ud83d\udd12 Always back up critical tables before running <code>UPDATE</code> or <code>DELETE</code>.</li> <li>\ud83d\udd0d Validate your conditions with a <code>SELECT</code> query first:   <code>sql   SELECT * FROM customers WHERE customer_id = 305;</code></li> <li>\ud83e\uddea Run queries in a testing/staging environment before applying to production.</li> <li>\ud83d\udcdc Use transactions (e.g., <code>BEGIN</code>, <code>COMMIT</code>, <code>ROLLBACK</code>) when running batch operations to ensure consistency and recoverability.</li> </ul>"},{"location":"training/sql/04-dml/#summary","title":"Summary","text":"<p>DML operations are powerful tools that directly affect the business data inside an ERP system. With great power comes great responsibility: every change should be deliberate, tested, and ideally reversible. As you grow in your role, mastering DML will allow you to manage data confidently and accurately.</p> <p>\ud83e\udde0 Tip: Document every DML operation you perform in production \u2014 for traceability and rollback planning.</p>"},{"location":"training/sql/05-ddl/","title":"Data Definition Language (DDL)","text":"<p>Data Definition Language (DDL) consists of SQL commands used to create and modify the structure of database objects like tables, columns, indexes, and constraints. In an ERP environment, DDL is crucial for customizing schemas, preparing for migrations, and supporting system upgrades.</p> <p>As a Technical Consultant, understanding DDL enables you to tailor the database to match business requirements without compromising data integrity.</p>"},{"location":"training/sql/05-ddl/#create-table-define-new-structures","title":"CREATE TABLE \u2013 Define New Structures","text":"<p>Used to create new tables in the database.</p> <pre><code>CREATE TABLE branches (\n  branch_id INT PRIMARY KEY,\n  branch_name VARCHAR(100),\n  city VARCHAR(100)\n);\n</code></pre> <p>\ud83c\udfd7\ufe0f Useful when creating new entities such as warehouses, departments, or operational regions.</p>"},{"location":"training/sql/05-ddl/#alter-table-modify-existing-structures","title":"ALTER TABLE \u2013 Modify Existing Structures","text":"<p>Used to add, drop, or modify columns and constraints in existing tables.</p> <pre><code>ALTER TABLE customers\nADD COLUMN loyalty_points INT DEFAULT 0;\n</code></pre> <p>\ud83e\uddf1 Essential for extending ERP modules with custom fields (e.g., adding loyalty programs, tax IDs, or secondary contacts).</p>"},{"location":"training/sql/05-ddl/#drop-table-remove-a-table","title":"DROP TABLE \u2013 Remove a Table","text":"<p>Deletes an entire table and all its data. Use with extreme caution.</p> <pre><code>DROP TABLE old_transactions;\n</code></pre> <p>\u26a0\ufe0f Often used to clean up temporary or staging tables after data migration or testing.</p>"},{"location":"training/sql/05-ddl/#erp-use-cases-for-ddl","title":"ERP Use Cases for DDL","text":"<ul> <li>\ud83d\udee0\ufe0f Add custom fields to accommodate country-specific or client-specific attributes</li> <li>\ud83d\udd04 Create temporary staging tables for data migration or ETL processes</li> <li>\ud83e\udde9 Modify data types to align with third-party system integrations</li> <li>\u2b06\ufe0f Adjust schema during ERP system upgrades</li> </ul>"},{"location":"training/sql/05-ddl/#best-practices-for-using-ddl","title":"Best Practices for Using DDL","text":"<ul> <li>\u2705 Always take full database backups before structural changes</li> <li>\ud83e\uddea Perform DDL changes in staging environments first</li> <li>\ud83d\udccb Review dependencies \u2014 changing a table might affect reports, integrations, or applications</li> <li>\ud83e\udded Use version control or change logs to track schema modifications over time</li> <li>\ud83d\udca1 Favor <code>ALTER TABLE</code> over <code>DROP + CREATE</code> to retain existing data</li> </ul>"},{"location":"training/sql/05-ddl/#summary","title":"Summary","text":"<p>DDL forms the blueprint of your ERP system's data architecture. Proper use of <code>CREATE</code>, <code>ALTER</code>, and <code>DROP</code> commands allows you to evolve and extend ERP functionality as business needs grow \u2014 all while maintaining structure, reliability, and integrity.</p> <p>\ud83e\udde0 Tip: When customizing ERP schemas, always confirm your changes align with the core system's upgrade path to avoid future compatibility issues.</p>"},{"location":"training/sql/06-aggregate-functions/","title":"Aggregate Functions and Grouping","text":"<p>Aggregate functions allow you to perform calculations on sets of rows and return summarized values. These functions are especially powerful in ERP reporting, enabling insights like total sales, inventory counts, or average revenue per customer.</p>"},{"location":"training/sql/06-aggregate-functions/#common-aggregate-functions","title":"Common Aggregate Functions","text":"<ul> <li><code>COUNT(*)</code> \u2013 Returns the total number of rows</li> <li><code>SUM(column)</code> \u2013 Calculates the total value of a column</li> <li><code>AVG(column)</code> \u2013 Computes the average value of a column</li> <li><code>MIN(column)</code> / <code>MAX(column)</code> \u2013 Finds the lowest or highest values in a column</li> </ul> <p>\ud83d\udd0d These are essential for dashboards, performance metrics, and management reporting in ERP systems.</p>"},{"location":"training/sql/06-aggregate-functions/#group-by-segmenting-data-for-aggregation","title":"GROUP BY \u2013 Segmenting Data for Aggregation","text":"<p><code>GROUP BY</code> is used to group rows based on one or more columns before applying an aggregate function.</p> <pre><code>SELECT customer_city, COUNT(*) AS total_customers\nFROM customers\nGROUP BY customer_city;\n</code></pre> <p>\ud83d\udcca Great for generating summaries like customers by city, orders per region, or revenue by department.</p>"},{"location":"training/sql/06-aggregate-functions/#having-filtering-grouped-results","title":"HAVING \u2013 Filtering Grouped Results","text":"<p>Unlike <code>WHERE</code>, which filters rows before grouping, <code>HAVING</code> filters after aggregation.</p> <pre><code>SELECT employee_id, COUNT(*) AS orders_handled\nFROM orders\nGROUP BY employee_id\nHAVING COUNT(*) &gt; 20;\n</code></pre> <p>\ud83c\udfaf Useful when analyzing productivity or performance thresholds (e.g., employees with more than 20 orders).</p>"},{"location":"training/sql/06-aggregate-functions/#erp-use-cases-for-aggregates","title":"ERP Use Cases for Aggregates","text":"<ul> <li>\ud83d\udcc8 Sales Analysis: </li> <li>Total and average sales per region or sales rep</li> <li>\ud83c\udfc6 Product Performance:</li> <li>Top 5 best-selling or slow-moving items</li> <li>\ud83e\uddfe Invoice Tracking:</li> <li>Number of unpaid invoices per customer</li> <li>\ud83d\udce6 Inventory Summary:</li> <li>Count of items below minimum stock level</li> <li>\ud83d\udc65 HR Insights:</li> <li>Average leave days per department</li> </ul>"},{"location":"training/sql/06-aggregate-functions/#best-practices","title":"Best Practices","text":"<ul> <li>Use aliases (<code>AS</code>) to label your output clearly.</li> <li>Always include GROUP BY fields in the <code>SELECT</code> clause.</li> <li>Combine with JOINs to enrich grouped data (e.g., joining orders and customers).</li> <li>Leverage ORDER BY to rank or sort aggregate results.</li> </ul>"},{"location":"training/sql/06-aggregate-functions/#summary","title":"Summary","text":"<p>Aggregate functions are at the heart of ERP analytics. Whether you're tracking performance, analyzing sales, or generating dashboards, mastering SQL aggregates will empower you to turn raw data into actionable insights.</p> <p>\ud83e\udde0 Tip: When building business reports, always validate the logic of your GROUP BY and HAVING clauses to ensure accuracy in your results.</p>"},{"location":"training/sql/07-subqueries/","title":"Subqueries and Nested SELECTs","text":"<p>Subqueries (also known as nested queries) allow you to embed one SQL query inside another. This makes it possible to break down complex problems into manageable parts \u2014 a technique especially useful when working with layered data in ERP systems.</p>"},{"location":"training/sql/07-subqueries/#what-is-a-subquery","title":"What is a Subquery?","text":"<p>A subquery is a query nested inside a <code>SELECT</code>, <code>FROM</code>, or <code>WHERE</code> clause. It helps retrieve data that will then be used by the main (outer) query.</p> <p>Subqueries can be:</p> <ul> <li>Inline (also called non-correlated)</li> <li>Correlated (dependent on the outer query)</li> </ul>"},{"location":"training/sql/07-subqueries/#inline-subquery","title":"Inline Subquery","text":"<p>Executes independently and passes its results to the outer query.</p> <pre><code>SELECT product_name\nFROM products\nWHERE product_id IN (\n  SELECT product_id\n  FROM sales\n  WHERE sale_date = CURDATE()\n);\n</code></pre> <p>\ud83d\udce6 Used to find all products sold today based on the sales table.</p>"},{"location":"training/sql/07-subqueries/#correlated-subquery","title":"Correlated Subquery","text":"<p>Refers to columns from the outer query and runs once for each row evaluated by the outer query.</p> <pre><code>SELECT employee_name\nFROM employees e\nWHERE salary &gt; (\n  SELECT AVG(salary)\n  FROM employees\n  WHERE department_id = e.department_id\n);\n</code></pre> <p>\ud83d\udcbc Used to find employees earning above the average salary in their department \u2014 helpful for HR analytics.</p>"},{"location":"training/sql/07-subqueries/#use-cases-in-erp","title":"Use Cases in ERP","text":"<ul> <li> <p>\ud83d\uded2 Identify products never sold: <code>sql   SELECT product_name   FROM products   WHERE product_id NOT IN (     SELECT DISTINCT product_id     FROM sales   );</code></p> </li> <li> <p>\ud83e\uddcd Find inactive customers: <code>sql   SELECT customer_id, customer_name   FROM customers   WHERE customer_id NOT IN (     SELECT DISTINCT customer_id     FROM orders   );</code></p> </li> <li> <p>\ud83c\udf0d Select top-selling product by region:   (Typically done with a correlated subquery or a <code>RANK()</code> function in advanced SQL.)</p> </li> </ul>"},{"location":"training/sql/07-subqueries/#best-practices","title":"Best Practices","text":"<ul> <li>\u2705 Start by writing and testing the subquery independently.</li> <li>\ud83e\uddea Use <code>EXISTS</code>, <code>IN</code>, or <code>NOT IN</code> carefully with large datasets for performance.</li> <li>\ud83d\udca1 Replace subqueries with JOINs where appropriate \u2014 especially for optimization.</li> <li>\ud83d\udcca Avoid nesting too deeply \u2014 it can reduce readability and increase processing time.</li> </ul>"},{"location":"training/sql/07-subqueries/#summary","title":"Summary","text":"<p>Subqueries are incredibly versatile for building dynamic filters and deriving comparative logic in a single SQL statement. When working with complex ERP systems, subqueries can help you uncover hidden insights, identify edge cases, and build advanced reports.</p> <p>\ud83e\udde0 Tip: Use subqueries when a value in your main query depends on a dynamic result set derived from other tables.</p>"},{"location":"training/sql/08-sql-functions/","title":"SQL Functions and Expressions","text":"<p>SQL offers a wide array of built-in functions and conditional expressions that help you manipulate, transform, and analyze data directly in your queries. These functions are essential for cleaning, formatting, and enriching data \u2014 tasks frequently encountered in ERP customization, reporting, and data preparation.</p>"},{"location":"training/sql/08-sql-functions/#string-functions","title":"String Functions","text":"<p>Used to transform and analyze text data.</p> <pre><code>SELECT UPPER(customer_name), LENGTH(customer_name)\nFROM customers;\n</code></pre> <p>\u2709\ufe0f Standardize case formatting (e.g., UPPER, LOWER) or measure field length for validations.</p>"},{"location":"training/sql/08-sql-functions/#common-string-functions","title":"Common String Functions","text":"Function Description <code>UPPER(text)</code> Converts text to uppercase <code>LOWER(text)</code> Converts text to lowercase <code>LENGTH(text)</code> Returns number of characters in a string <code>CONCAT()</code> Joins multiple strings into one <code>SUBSTRING()</code> Extracts a portion of a string"},{"location":"training/sql/08-sql-functions/#date-functions","title":"Date Functions","text":"<p>Operate on date and time fields for calculation or formatting.</p> <pre><code>SELECT NOW(), DATE_ADD(order_date, INTERVAL 7 DAY)\nFROM orders;\n</code></pre> <p>\ud83d\udcc6 Common for calculating due dates, lead times, and delivery windows.</p>"},{"location":"training/sql/08-sql-functions/#common-date-functions","title":"Common Date Functions","text":"Function Description <code>NOW()</code> Returns the current date and time <code>CURDATE()</code> Returns the current date <code>DATE_ADD(date, INTERVAL X)</code> Adds interval to a date <code>DATEDIFF(date1, date2)</code> Returns difference in days between dates <code>YEAR(date)</code> / <code>MONTH(date)</code> Extracts year or month from a date"},{"location":"training/sql/08-sql-functions/#conditional-logic-with-case","title":"Conditional Logic with CASE","text":"<p>The <code>CASE</code> statement lets you create conditional logic directly within your query \u2014 similar to <code>IF</code> statements in programming.</p> <pre><code>SELECT order_id,\n       CASE \n         WHEN order_status = 'P' THEN 'Pending'\n         WHEN order_status = 'C' THEN 'Completed'\n         ELSE 'Other'\n       END AS status_label\nFROM orders;\n</code></pre> <p>\u2699\ufe0f Ideal for translating codes into human-readable labels or flagging statuses.</p>"},{"location":"training/sql/08-sql-functions/#erp-applications","title":"ERP Applications","text":"<ul> <li> <p>\ud83d\udcc5 Calculate days overdue on invoices:   <code>sql   SELECT invoice_id, DATEDIFF(NOW(), due_date) AS days_overdue   FROM invoices   WHERE payment_status = 'Unpaid';</code></p> </li> <li> <p>\ud83e\uddee Derive fiscal periods or age from birthdates or transaction dates</p> </li> <li>\ud83e\uddfe Format tax codes or addresses for reporting consistency</li> <li>\ud83d\udce6 Label orders by fulfillment status or aging categories</li> </ul>"},{"location":"training/sql/08-sql-functions/#best-practices","title":"Best Practices","text":"<ul> <li>Use function chaining (e.g., <code>UPPER(TRIM(name))</code>) for compound transformations.</li> <li>Be mindful of performance when applying functions to indexed columns \u2014 they can disable index use.</li> <li>Apply CASE for classification or decision-making logic in dynamic reports.</li> </ul>"},{"location":"training/sql/08-sql-functions/#summary","title":"Summary","text":"<p>SQL functions and expressions are powerful tools that enhance the flexibility and intelligence of your queries. In ERP systems, they empower you to make raw data more meaningful, accurate, and aligned with business needs \u2014 all without extra processing on the application side.</p> <p>\ud83e\udde0 Tip: Use functions strategically to minimize the need for post-processing in reporting tools like Power BI or Excel.</p>"},{"location":"training/sql/09-practice-assessment/","title":"Practice and Assessment","text":"<p>This final module helps reinforce your understanding of SQL in the context of ERP systems. It combines hands-on exercises with assessment questions to ensure you're comfortable applying your knowledge to real-world business data scenarios.</p>"},{"location":"training/sql/09-practice-assessment/#practical-exercises","title":"\ud83d\udcbc Practical Exercises","text":"<p>Use these SQL challenges to simulate common ERP data operations. Use a staging or mock dataset to validate your solutions.</p> <ol> <li>Inactive Customers:</li> <li> <p>List all customers who have not placed any orders in the last 3 months.</p> </li> <li> <p>Stock Replenishment:</p> </li> <li> <p>Identify products where the inventory level is below the reorder threshold.</p> </li> <li> <p>Employee Performance:</p> </li> <li> <p>Show the number of orders handled by each employee in the current month.</p> </li> <li> <p>Customer Demographics:</p> </li> <li> <p>Display the top 3 cities with the highest number of customers.</p> </li> <li> <p>Supplier Activity:</p> </li> <li>Find suppliers with no purchase transactions in the last 90 days.</li> </ol>"},{"location":"training/sql/09-practice-assessment/#final-assessment-quiz","title":"\ud83d\udcdd Final Assessment Quiz","text":"<p>Answer the following questions to demonstrate your comprehension of SQL concepts in ERP environments:</p> <ol> <li>JOIN Logic:</li> <li> <p>What is the difference between <code>INNER JOIN</code> and <code>LEFT JOIN</code>? Provide an example.</p> </li> <li> <p>Sales Summary:</p> </li> <li> <p>Write a query to calculate total sales (e.g., quantity \u00d7 price) grouped by product.</p> </li> <li> <p>Data Update:</p> </li> <li> <p>How would you update the price of a specific product in the product master table?</p> </li> <li> <p>Group Analytics:</p> </li> <li> <p>How do you retrieve the highest salary in each department?</p> </li> <li> <p>Data Grouping:</p> </li> <li>What is the purpose of <code>GROUP BY</code> in SQL? When would you use it?</li> </ol>"},{"location":"training/sql/09-practice-assessment/#tips-for-success","title":"\ud83d\udca1 Tips for Success","text":"<ul> <li>Use realistic ERP schema structures \u2014 include customers, products, orders, employees, and inventory tables.</li> <li>Build test cases to verify correctness of your queries.</li> <li>Focus on query clarity, accuracy, and efficiency.</li> <li>Document assumptions (e.g., \"3 months = 90 days\") when writing solutions.</li> <li>Consider edge cases \u2014 like missing data or NULL values.</li> </ul>"},{"location":"training/sql/09-practice-assessment/#goal","title":"\ud83c\udf1f Goal","text":"<p>By completing these exercises and the assessment, you\u2019ll solidify your foundational SQL skills and be better prepared to analyze, manipulate, and report on ERP data in real business contexts.</p> <p>\ud83e\udde0 Challenge: Modify one of the exercises to include a subquery or a CASE expression for bonus practice!</p>"}]}